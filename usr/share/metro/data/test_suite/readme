                                METRo test_suite README file

You are currently reading the test_suite README file of the release 4.0.0 (December 2019)


============================= What is test_suite.py of METRo? ===========================
The test_suite.py of METRo is created to run pre-selected case(s) automatically.
Once test_suite.py finishes running, it generates the running result and outputs a forecast
file named "roadcast_test_suite_run.xml" for each individual pre-selected case. It then
compares the forecast file "roadcast_test_suite_run.xml" with the given benchmark forecast
file "roadcast_reference.xml" and displays the comparison result for each pre-selected case.


============================ Where is test_suite.py located? =============================
test_suite.py is placed in the directory "test_suite" which is located in the absolute path
"~/usr/share/metro/data/test_suite" where "~" represents the home directory of the software
METRo.


============================ Where is each test case located? =============================
Within the directory "test_suite", it contains all the subdirectories of test cases.
Each test case has one subdirectory named "casexxx" and "xxx" represents a three digits
case number (For instance, "case001" represents a case having case number 1, and "case100"
represents a case having case number 100).


============= What are all the possible files included inside a case directory? ============
"config.json":
This is the configuration file and it includes two attributes: "addition_to_command_line"
and "expected_running_result".
One extra attribute "error_torelance" can be added and the value of this attribute
has to be in decimal places (For example, having the value of "0.05" as the "error_tolerance",
the comparison result between "roadcast_test_suite_run.xml" and "roadcast_reference.xml"
lies outside the range of 0.05; in other words, any comparison differences within 0.05 are ignored).
Note: If you would like to use the default error tolerance of "0.01", there is no need to add this
extra attribute in "config.json".

"forecast.xml", "observation.xml" and "station.xml":
These are the input files and each case should have these three files in order for METRo to
generate possible forecast.

"roadcast_reference.xml":
This is a benchmark forecast file and it only exists for those cases whose attribute
"expected_running_result" has value of "SUCCESS".


=========================== How to run test_suite.py? ======================================
1. Go to the directory "~/usr/share/metro/data/test_suite" where "~" represents the home
   directory of METRo.

2. Options to enter the command:
   2.1  The command "python3 test_suite.py":
        test_suite.py runs all cases inside the directory "test_suite" and displays the running
        results in a simplified version.
   2.2  The command "python3 test_suite.py -v":
        test_suite.py runs all cases inside the directory "test_suite" and displays the detailed
        information of running processes and outputs the running results in a verbose version.
        *Note: "-v" can be used in combination with either "-c" or "-s" and "-e".
   2.3  The command "python3 test_suite.py -c XX, XX, XX, ..." where XX represents the case number:
        test_suite.py runs the case(s) whose number(s) is/are entered after "-c". You can enter as
        many case numbers as you would like to run, but you have to enter at least one case number
        in order to active "-c".
        *Note: "-c" and "-s" cannot be used simultaneously.
   2.4  The command "python3 test_suite.py -s XX, XX, XX, ..." where XX represents the case number:
        test_suite.py runs by skipping the case(s) whose number(s) is/are entered after "-s". You
        can enter as many case numbers as you would like to skip, but you have to enter at least
        one case number in order to active "-s".
        *Note: "-c" and "-s" cannot be used simultaneously.
   2.5  The command "python3 test_suite.py -e YY" where YY represents the error tolerance in
        floating points:
        test_suite.py runs all cases inside the directory "test_suite" and compares
        "roadcast_test_suite_run.xml" with "roadcast_reference.xml" and outputs comparison result(s)
        using YY instead of the default value of 0.01 as error of tolerance.
        *Note: "-e" can be used in combination with either "-c" or "-s" and "-v".
   2.6  The command "python3 test_suite.py --clean":
        test_suite.py deletes all the files named "roadcast_test_suite_run.xml" within the directory
        "test_suite".
        *Note: "--clean" can be used in combination with "-v" which displays all the directory/directories
                where the "roadcast_test_suite_run.xml" is/are deleted.

*Note: You can always enter "python3 test_suite.py --help" for more information on how to use above
       argument(s) to run test_suite.py